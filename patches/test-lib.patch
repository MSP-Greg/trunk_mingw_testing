Patch by MSP-Greg
Added -a --assert parameter for test-all
a) turns on verbose
b) adjusts assertions count so that tests, regardless of manner run, show similar results.
c) adds assertion total by test to each line of output
diff --git a/test/lib/minitest/unit.rb b/test/lib/minitest/unit.rb
index 89b6a8eaf4..7b8c8ba669 100644
--- a/test/lib/minitest/unit.rb
+++ b/test/lib/minitest/unit.rb
@@ -3,7 +3,7 @@
 
 require "optparse"
 require "rbconfig"
-require "leakchecker"
+require_relative "../leakchecker"
 
 ##
 # Minimal (mostly drop-in) replacement for test-unit.
@@ -747,6 +747,7 @@ class Unit # :nodoc:
     attr_accessor :start_time                         # :nodoc:
     attr_accessor :help                               # :nodoc:
     attr_accessor :verbose                            # :nodoc:
+    attr_accessor :assert                             # :nodoc:
     attr_writer   :options                            # :nodoc:
 
     ##
@@ -887,8 +888,8 @@ def _run_anything type
 
         results = _run_suites suites, type
 
-        @test_count      = results.inject(0) { |sum, (tc, _)| sum + tc }
-        @assertion_count = results.inject(0) { |sum, (_, ac)| sum + ac }
+        @test_count      = results.sum { |i| i[0] }
+        @assertion_count = results.sum { |i| i[1] }
         test_count      += @test_count
         assertion_count += @assertion_count
         t = Time.now - start
@@ -897,7 +898,8 @@ def _run_anything type
           puts
           puts
         end
-        puts "Finished%s %ss in %.6fs, %.4f tests/s, %.4f assertions/s.\n" %
+        ret = options[:assert] ? "\n" : ""
+        puts "#{ret}Finished%s %ss in %.6fs, %.4f tests/s, %.4f assertions/s.\n" %
              [(@repeat_count ? "(#{count}/#{@repeat_count}) " : ""), type,
                t, @test_count.fdiv(t), @assertion_count.fdiv(t)]
       end while @repeat_count && count < @repeat_count &&
@@ -921,6 +923,7 @@ def _run_anything type
     #
 
     def _run_suites suites, type
+      @assert = @options[:assert]
       suites.map { |suite| _run_suite suite, type }
     end
 
@@ -942,18 +945,39 @@ def _run_suite suite, type
 
       leakchecker = LeakChecker.new
 
+      verbose = options[:verbose]
+      retry_run = options[:retry_run]
+      retry_len = retry_run.to_s.length if retry_run
+      assert_offset = 0
+
+      if self.assert # && options[:retry_run]
+        zombie   = (defined?(ZombieHunter)      && ZombieHunter.is_a?(Module)     )  ? -2 : 0
+        tracepnt = (defined?(TracePointChecker) && TracePointChecker.is_a?(Module)) ? -1 : 0
+        assert_offset = zombie + tracepnt
+      end
+
       assertions = filtered_test_methods.map { |method|
         inst = suite.new method
-        inst._assertions = 0
+        inst._assertions = assert_offset
 
-        print "#{suite}##{method} = " if @verbose
-
-        start_time = Time.now if @verbose
+        start_time = verbose ? Time.now : nil
         result = inst.run self
 
-        print "%.2f s = " % (Time.now - start_time) if @verbose
-        print result
-        puts if @verbose
+        if start_time
+          ttl = " = %.2f s = " % (Time.now - start_time)
+          if !self.assert # || MetaMetaMetaTestCase === inst.class.superclass
+            print "#{suite}##{method}#{ttl}#{result}"
+          elsif retry_run
+            @cntr ||= 0
+            @cntr += 1
+            print "[#{@cntr.to_s.rjust(retry_len)}/#{retry_run}] #{inst._assertions.to_s.rjust(6)} #{suite}##{method}#{ttl}#{result}"
+          else
+            print "#{inst._assertions.to_s.rjust(6)} #{suite}##{method}#{ttl}#{result}"
+          end
+          print "\n"
+        else
+          print result
+        end
         $stdout.flush
 
         leakchecker.check("#{inst.class}\##{inst.__name__}")
@@ -961,7 +985,7 @@ def _run_suite suite, type
         inst._assertions
       }
 
-      return assertions.size, assertions.inject(0) { |sum, n| sum + n }
+      return assertions.size, assertions.sum
     end
 
     ##
@@ -1001,7 +1025,7 @@ def puke klass, meth, e
       e = case e
           when MiniTest::Skip then
             @skips += 1
-            return "S" unless @verbose
+            return "S" unless @verbose || options[:hide_skip] == false
             "Skipped:\n#{klass}##{meth} [#{location e}]:\n#{e.message}\n"
           when MiniTest::Assertion then
             @failures += 1
@@ -1019,6 +1043,7 @@ def initialize # :nodoc:
       @report = []
       @errors = @failures = @skips = 0
       @verbose = false
+      @assert = false
       @mutex = Thread::Mutex.new
       @info_signal = Signal.list['INFO']
       @repeat_count = nil
@@ -1053,6 +1078,11 @@ def process_args args = [] # :nodoc:
           options[:verbose] = true
         end
 
+        opts.on '-a', '--assert', "Adjust & show assertions numbers" do
+          options[:verbose] = true
+          options[:assert]  = true
+        end
+
         opts.on '-n', '--name PATTERN', "Filter test names on pattern (e.g. /foo/)" do |a|
           options[:filter] = a
         end
@@ -1070,6 +1100,8 @@ def process_args args = [] # :nodoc:
       srand options[:seed]
 
       self.verbose = options[:verbose]
+      self.assert  = options[:assert]
+
       @help = orig_args.map { |s| s =~ /[\s|&<>$()]/ ? s.inspect : s }.join " "
 
       options
diff --git a/test/lib/test/unit.rb b/test/lib/test/unit.rb
index 761fe92df8..f2336637f2 100644
--- a/test/lib/test/unit.rb
+++ b/test/lib/test/unit.rb
@@ -3,10 +3,10 @@
   gem 'minitest', '< 5.0.0' if defined? Gem
 rescue Gem::LoadError
 end
-require 'minitest/unit'
-require 'test/unit/assertions'
+require_relative '../minitest/unit'
+require_relative 'unit/assertions'
 require_relative '../envutil'
-require 'test/unit/testcase'
+require_relative 'unit/testcase'
 require 'optparse'
 
 # See Test::Unit
@@ -83,7 +83,14 @@ def setup_options(opts, options)
 
         opts.on '-v', '--verbose', "Verbose. Show progress processing files." do
           options[:verbose] = true
-          self.verbose = options[:verbose]
+          self.verbose = true
+        end
+
+        opts.on '-a', '--assert', "Adjust & show assertions numbers" do
+          options[:verbose] = true
+          options[:assert]  = true
+          self.verbose = true
+          self.assert  = true
         end
 
         opts.on '-n', '--name PATTERN', "Filter test method names on pattern: /REGEXP/, !/REGEXP/ or STRING" do |a|
@@ -451,7 +458,6 @@ def _run_parallel suites, type, result
           warn "Error: parameter of -j option should be greater than 0."
           return
         end
-
         # Require needed thing for parallel running
         require 'timeout'
         @tasks = @files.dup # Array of filenames.
@@ -504,7 +510,12 @@ def _run_parallel suites, type, result
             suites.map! {|r| eval("::"+r[:testcase])}
             del_status_line or puts
             unless suites.empty?
-              puts "\n""Retrying..."
+              puts "\nRetrying..."
+              if @options[:retry]
+                ttl_count = 0
+                suites.each { |s| ttl_count += s.public_instance_methods(true).grep(/^test/).length }
+                @options[:retry_run] = ttl_count
+              end
               _run_suites(suites, type)
             end
             @options[:parallel] = parallel
@@ -521,7 +532,7 @@ def _run_parallel suites, type, result
             if @options[:retry]
               @errors   += rep.map{|x| x[:result][0] }.inject(:+)
               @failures += rep.map{|x| x[:result][1] }.inject(:+)
-              @skips    += rep.map{|x| x[:result][2] }.inject(:+)
+              @skips    += rep.map{|x| x[:result][2] }.inject(:+) unless @options[:parallel]
             end
           end
           unless @warnings.empty?
@@ -582,7 +593,7 @@ def setup_options(opts, options)
       private
       def _run_suites(suites, type)
         result = super
-        report.reject!{|r| r.start_with? "Skipped:" } if @options[:hide_skip]
+        report.reject! {|r| r.start_with? "Skipped:" } if @options[:hide_skip]
         report.sort_by!{|r| r.start_with?("Skipped:") ? 0 : \
                            (r.start_with?("Failure:") ? 1 : 2) }
         failed(nil)
@@ -696,6 +707,7 @@ def output
       end
 
       def _prepare_run(suites, type)
+        @assert = options[:assert]
         options[:job_status] ||= :replace if @tty && !@verbose
         case options[:color]
         when :always
@@ -1085,13 +1097,17 @@ def puke klass, meth, e
         # TODO:
         #   this overriding is for minitest feature that skip messages are
         #   hidden when not verbose (-v), note this is temporally.
-        n = report.size
-        rep = super
-        if MiniTest::Skip === e and /no message given\z/ =~ e.message
-          report.slice!(n..-1)
-          rep = "."
+        if options[:hide_skip] == false
+          super
+        else
+          n = report.size
+          rep = super
+          if MiniTest::Skip === e and /no message given\z/ =~ e.message
+            report.slice!(n..-1)
+            rep = "."
+          end
+          rep
         end
-        rep
       end
     end
 
diff --git a/test/lib/tracepointchecker.rb b/test/lib/tracepointchecker.rb
index 447a63bc1e..4dc812aa71 100644
--- a/test/lib/tracepointchecker.rb
+++ b/test/lib/tracepointchecker.rb
@@ -1,4 +1,9 @@
 # frozen_string_literal: true
+
+# The assertions called in after_teardown are offset in minitest/unit.rb
+# so that assertions counts with and with this are the same.  If the count
+# changes, please adjust the code in unit.rb, search for tracepnt
+
 module TracePointChecker
   STATE = {
     count: 0,
diff --git a/test/lib/zombie_hunter.rb b/test/lib/zombie_hunter.rb
index 2b81e396ac..cb15acb95c 100644
--- a/test/lib/zombie_hunter.rb
+++ b/test/lib/zombie_hunter.rb
@@ -1,4 +1,9 @@
 # frozen_string_literal: true
+
+# The assertions called in after_teardown are offset in minitest/unit.rb
+# so that assertions counts with and with this are the same.  If the count
+# changes, please adjust the code in unit.rb, search for zombie
+
 module ZombieHunter
   def after_teardown
     super
diff --git a/test/runner.rb b/test/runner.rb
index d8b44644f7..5e29db7f1a 100644
--- a/test/runner.rb
+++ b/test/runner.rb
@@ -10,7 +10,7 @@
   .reject {|f| f =~ /minitest|test-unit|power_assert/ }
   .map {|f| $LOAD_PATH.unshift File.join(File.dirname(f), "lib") }
 
-require 'test/unit'
+require_relative './lib/test/unit'
 
 module Gem
 end
